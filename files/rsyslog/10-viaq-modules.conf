# Read from file with inotify enabled
module(load="imfile" mode="inotify")

# Read from journal
module(load="imjournal" StateFile=`echo $RSYSLOG_IMJOURNAL_STATE` UsePid="both"
       RateLimit.Burst="1000000" RateLimit.Interval="10" PersistStateInterval="1000"
       WorkAroundJournalBug="on" IgnorePreviousMessages=`echo $RSYSLOG_JOURNAL_READ_FROM_TAIL`)

# Normalize logs
module(load="mmnormalize")

# Parse logs to JSON
module(load="mmjsonparse")

# Send to ElasticSearch
module(load="omelasticsearch")

# get Kubernetes metadata for Kubernetes container logs
module(load="mmkubernetes")

# stats for monitoring
# cannot enable until there is log rotation for this file
#module(load="impstats" interval="1" format="cee" log.syslog="off" log.file=`echo $RSYSLOG_IMPSTATS_FILE`)

module(load="omprog")

module(
  load="impstats"
  interval="10"
  format="json"
  resetCounters="off"
  ruleset="prometheus_stats"
)

template(name="impstats_file_template" type="string" string="%msg%\n")

# the general idea here is that this queue should be very lightweight, not block
# anything, and discard messages if too heavily loaded
ruleset(name="prometheus_stats" queue.type="FixedArray" queue.size="1000" queue.timeoutEnqueue="100"
        queue.discardSeverity="4" queue.timeoutshutdown="10") {
  if `echo $ENABLE_PROMETHEUS_ENDPOINT` == "true" then {
    action(
      type="omprog"
      name="prometheus_stats"
      binary="/usr/local/bin/rsyslog_exporter --web.listen-address=:24231 --tls.server-crt=/etc/rsyslog/metrics/tls.crt --tls.server-key=/etc/rsyslog/metrics/tls.key"
    )
  }
  if `echo $RSYSLOG_USE_IMPSTATS_FILE` == "true" then {
    action(name="impstats_json" type="omfile" file=`echo $RSYSLOG_IMPSTATS_FILE` template="impstats_file_template")
  }
}
